name: Pipe To Binary Locker
description: Pipe the binary artifact and the pages directory to the Binary Locker service

inputs:
  binary-output:
    description: The path for the binary artifact
    required: true
  api-domain:
    description: The domain for the Binary Locker API (e.g. https://api.binarylocker.com)
    required: true
  api-username:
    description: The username for the Binary Locker API
    required: true
  api-key:
    description: The API key for the Binary Locker API
    required: true
  api-path:
    description: The path for the Binary Locker API without the internal path to the endpoint (e.g. v1)
    required: false
    default: ''
  pages-directory:
    description: The path for the pages directory
    required: false
    default: 'pages'
  skip-pages:
    description: Skip the page deployment
    required: false
    default: 'false'

outputs:
  binary-url:
    description: The URL for the binary artifact
    value: ${{ steps.upload.outputs.url }}
  pages-url:
    description: The URL for the pages directory
    value: ${{ steps.upload.outputs.pages_url }}

runs:
  using: composite
  steps:
    - name: Extract mod info
      id: extract-info
      uses: actions/github-script@v7
      with:
        script: |
          try {
            const { id, version } = require("./mod.json");

            return {
              mod_id: id,
              mod_version: version
            };
          } catch(error) {
            core.error("Error while reading or parsing the JSON");
            core.setFailed(error);
          }
    - name: Normalize API URL
      id: normalize-api-url
      run: |
        api_domain="${{ inputs.api-domain }}"
        api_domain="${ api_domain%/ }"
        api_path="${{ inputs.api-path }}"
        api_path="${ api_path#/ }"
        api_path="${ api_path%/ }"
        echo "::set-output name=api-url::${ api_domain }/${ api_path }"
      shell: bash
    - name: Deploy binary
      id: deploy-binary
      uses: fjogeleit/http-request-action@v1
      with:
        url: ${{ steps.normalize-api-url.outputs.api-url }}/api/bin/deploy/${{ steps.extract-info.outputs.mod_id }}/${{ steps.extract-info.outputs.mod_version }}
        method: POST
        username: ${{ inputs.api-username }}
        password: ${{ inputs.api-key }}
        files: { 'bin': '${{ inputs.binary-output }}' }
    - name: Create pages zip
      id: create-pages-zip
      if: ${{ inputs.skip-pages == 'false' }}
      run: |
        pages_directory = "${{ inputs.pages-directory }}"
        pages_directory="${ pages_directory%/ }"
        zip -r ${{ github.workspace }}/pages.zip ${ pages_directory }/*
      shell: bash
    - name: Deploy pages
      id: deploy-pages
      if: ${{ inputs.skip-pages == 'false' }}
      uses: fjogeleit/http-request-action@v1
      with:
        url: ${{ steps.normalize-api-url.outputs.api-url }}/api/pages/deploy/${{ steps.extract-info.outputs.mod_id }}/${{ steps.extract-info.outputs.mod_version }}
        method: POST
        username: ${{ inputs.api-username }}
        password: ${{ inputs.api-key }}
        files: { 'pages': '${{ github.workspace }}/pages.zip' }
