name: Pipe To Binary Locker
description: Pipe the binary artifact and the pages directory to the Binary Locker service

inputs:
  binary-output:
    description: The path for the binary artifact
    required: true
  api-domain:
    description: The domain for the Binary Locker API (e.g. https://api.binarylocker.com)
    required: true
  api-username:
    description: The username for the Binary Locker API
    required: true
  api-key:
    description: The API key for the Binary Locker API
    required: true
  api-path:
    description: The path for the Binary Locker API without the internal path to the endpoint (e.g. v1)
    required: false
    default: ''
  pages-directory:
    description: The path for the pages directory
    required: false
    default: 'pages'
  skip-pages:
    description: Skip the page deployment
    required: false
    default: 'false'

outputs:
  binary-url:
    description: The response of the binary deployment
    value: ${{ steps.deploy-binary.response }}
  pages-url:
    description: The response of the page deployment
    value: ${{ steps.deploy-pages.response }}

runs:
  using: composite
  steps:
    - uses: actions/checkout@v4
    - name: Get mod info
      id: get-mod-info
      run: cat "${{ github.workspace }}/mod.json"
      shell: bash
    - name: Extract mod info
      id: extract-info
      uses: SMJS-Productions/json-extract@main
      with:
        json: ${{ steps.get-mod-info.outputs.stdout }}
        paths: '["id", "version"]'
        keys: '["mod_id", "mod_version"]'
    - name: Normalize API URL
      id: normalize-api-url
      run: |
        api_domain="${{ inputs.api-domain }}"
        api_domain="${api_domain%/}"
        api_path="${{ inputs.api-path }}"
        api_path="${api_path#/}"
        api_path="${api_path%/}"
        if [ -z "$api_path" ]; then
          echo "api-url=${api_domain}" >> $GITHUB_OUTPUT
        else
          echo "api-url=${api_domain}/${api_path}" >> $GITHUB_OUTPUT
        fi
      shell: bash
    - name: Deploy binary
      id: deploy-binary
      uses: fjogeleit/http-request-action@main
      with:
        url: ${{ steps.normalize-api-url.outputs.api-url }}/api/bin/deploy/${{ steps.extract-info.outputs.values.mod_id }}/${{ steps.extract-info.outputs.values.mod_version }}
        method: POST
        username: ${{ inputs.api-username }}
        password: ${{ inputs.api-key }}
        contentType: multipart/form-data
        files: '{ "bin": "${{ inputs.binary-output }}/${{ steps.extract-info.outputs.values.mod_id }}.geode" }'
        ignoreStatusCodes: '409'
    - name: Create pages zip
      id: create-pages-zip
      if: ${{ inputs.skip-pages == 'false' }}
      run: |
        cd ${{ inputs.pages-directory }}
        zip -r ${{ github.workspace }}/pages.zip *
      shell: bash
    - name: Deploy pages
      id: deploy-pages
      if: ${{ inputs.skip-pages == 'false' }}
      uses: fjogeleit/http-request-action@main
      with:
        url: ${{ steps.normalize-api-url.outputs.api-url }}/api/pages/deploy/${{ steps.extract-info.outputs.values.mod_id }}
        method: POST
        username: ${{ inputs.api-username }}
        password: ${{ inputs.api-key }}
        contentType: multipart/form-data
        files: '{ "pages": "${{ github.workspace }}/pages.zip" }'
